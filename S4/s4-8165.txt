course: ISEX2
year: 2020
report: S4
department: 工情
id: 8165
name: 和田哲也
email: wada.tetsuya11@gmail.com
computer:  自宅のパソコン Mac
compiler: Scilab
hour: 3

<<EX-4.1>>

function [b, filter_size]=FirHpf_(fs, fe, delta)
    pi=3.1415926535897932384626433832795
    fc=(fe+delta/2)/fs;
    delta=delta/fs;
    filter_size=floor(3.1/delta);
    
    if modulo(filter_size,2)==0
        filter_size=filter_size+1;
    end
    
    exec('Window_.sci');
    w=HanningWindow_(filter_size);
    
    offset=(filter_size-1)/2+1;
    for k=-(filter_size-1)/2:(filter_size-1)/2,
        if k==0
            b(offset+k)=1-2*fc;
        else
            b(offset+k)=-(2*fc*sin(2*pi*fc*k))/(2*pi*fc*k);
        end
    end
    for k=1:filter_size,
        b(k)=b(k)*w(k);
    end
end

<<EX-4.2>>

function [b, filter_size]=FirBpf_(fs, fe1, fe2, delta)
    pi=3.1415926535897932384626433832795
    fc1=(fe1+delta/2)/fs;
    fc2=(fe2+delta/2)/fs;
    delta=delta/fs;
    filter_size=floor(3.1/delta);
    
    if modulo(filter_size,2)==0
        filter_size=filter_size+1;
    end
    
    exec('Window_.sci');
    w=HanningWindow_(filter_size);
    
    offset=(filter_size-1)/2+1;
    for k=-(filter_size-1)/2:(filter_size-1)/2,
        if k==0
            b(offset+k)=2*(fc2-fc1);
        else
            b(offset+k)=((2*fc2*sin(2*pi*fc2*k))/(2*pi*fc2*k))-((2*fc1*sin(2*pi*fc1*k))/(2*pi*fc1*k));
        end
    end
    for k=1:filter_size,
        b(k)=b(k)*w(k);
    end
end

<<EX-4.3>>

// BEF ////////////////////////////////////////////////
function [b, filter_size]=FirBef_(fs, fe1, fe2, delta)
    pi=3.1415926535897932384626433832795
    fc1=(fe1+delta/2)/fs;
    fc2=(fe2+delta/2)/fs;
    delta=delta/fs;
    filter_size=floor(3.1/delta);
    
    if modulo(filter_size,2)==0
        filter_size=filter_size+1;
    end
    
    exec('Window_.sci');
    w=HanningWindow_(filter_size);
    
    offset=(filter_size-1)/2+1;
    for k=-(filter_size-1)/2:(filter_size-1)/2,
        if k==0
            b(offset+k)=1-2*(fc2-fc1);
        else
            b(offset+k)=((2*fc1*sin(2*pi*fc1*k))/(2*pi*fc1*k))-((2*fc2*sin(2*pi*fc2*k))/(2*pi*fc2*k));
        end
    end
    for k=1:filter_size,
        b(k)=b(k)*w(k);
    end
end


<<EX-4.4>>

- hpf.wav
DoMiSoDoとの違い:ミソドの音は聞こえたが、ド(+1)の音は聞こえなかった。
違いの理由:푓푒 = 587.33 Hz，훿 = 50より遮断周波数は612.33 Hzとなる。よって523.25 Hzのド音は聞こえたが、612.33Hz以上となるミソド(+1)の音は聞こえなかったと考えられる。

- lpf.wav
DoMiSoDoとの違い:ドの音は聞こえたが、ミソド(+1)の音は聞こえなかった
違いの理由:遮断周波数は587.33-50/2=562.33Hzとなるため、これより低い周波数のド音は聞こえなかったが、562.33Hz異常となるミソド(+1)の音は聞こえたと考えられる。

<<EX-4.5>>

- bpf.wav
DoMiSoDoとの違い:ミソ音は聞こえたが、ドとド(1+)音は聞こえなかった
違いの理由:バンドパスフィルタはfe1=587.33,fe2=783.99,훿=50より、562.33Hz以上808.99Hz以下の音のみが通過できる。よって、この範囲外となるドとド(1+)音は聞こえなかったと考えられる。

- bef.wav
DoMiSoDoとの違い:ドとド(1+)音は聞こえたが、ミソ音は聞こえなかった
違いの理由:バンドエリミネートフィルタは562.33Hz以下、または808.99Hz以上の音のみが通過できる。よって、この範囲外となる音は聞こえなかったと考えられる。

<<EX-4.6>>

fe1 = 538.85
fe2 = 570.86
delta = 10

<<EX-4.7>>

- DoMiSoDoとの違い
ド音より高くミ音より低い音が混ざっている

- hpfでDoMiSoDo_etcをDoMiSoDOに近づける最小のfeを求めた手順
δは10とした。
fe=659.26でhpf.wavを作成したところ、かなり近い音源が得られた。
次に、fe=600でhpf.wavを作成したところ、やはり近い音源が得られた。
さらにfeを小さくしてfe=550でhpf.wavを作成したところ、異なる音源となった。
よって、もっとも近いとみなせる最小のfeはfe=600となった。


<<EX-4.8>>

- lpfでDoMiSoDo_etcをDoMiSoDOに近づける最大のfeを求めた手順
fe=550でlpf.wavを作成したところ、異なる音源となった。
次にfe=500でlpf.wavを作成したところ、全く音が鳴らない音源となった。
次に、fe=530としてlpf.wavを作成したところ、かなり近い音源が得られた。
よって、最も近いとみなせる最大のfeはfe=530となった。

<<EX-4.9>>

fe1 = 530
fe2 = 600
delta = 10

<<全体の感想>>

フーリエ変換によって求めた式をプログラムに落とし込み実行すると、実際に求める変換が行われる様子を体験することができ、非常に面白かった。はじめ、プログラムを見ただけでは、なぜこのような計算をすることで特定の周波数だけ取り除くといった操作が実現されるのかさっぱりわからなかったが、演習を行う中で、理論と計算が頭の中で結びつき、体感として理解できた。またこのような演習に取り組む機会があればやってみたい。