course: ISEX2
year: 2020
report: R2
department: 工情
id: 8165
name: 和田哲也
email: wada.tetsuya11@gmail.com
computer: 自宅のパソコン Mac
compiler: g++
hour: 2

<<EX-2.1>>

（結果）
(base) wadatetsuya@MacBook-Pro program % ./a.out     
directory service: 06-6879-7806
osaka university: 06-6879-7806

（コメント）
比較的簡単だった。

<<EX-2.1 program>>

#include <iostream>
#include <string>

class Entry
{
public:
    std::string name;
    std::string phone;
    Entry(const std::string &nm = "", const std::string &ph = "")
    {
        name = nm;
        phone = ph;
    }
};

std::ostream &operator<<(std::ostream &os, const Entry &e)
{
    os << e.name << ": " << e.phone;
    return os;
}

int main()
{
    Entry e[10];
    int n = 0;
    e[n++] = Entry("university of tokyo", "03-3812-2111");
    e[n++] = Entry("osaka university", "06-879-7806");
    e[n++] = Entry("kinki university", "06-721-2332");
    e[n++] = Entry("osaka prefectural university", "0722-52-1161");
    e[n++] = Entry("kyoto university", "075-753-7531");
    for (int i = 0; i < n; i++)
    {
        /* *** 大阪の局番4 桁化 *** */
        if (e[i].phone.substr(0, 2) == "06")
        {
            e[i].phone.replace(0, 3, "06-6");
        }
    }
    std::cout << "directory service: ";
    /* *** 文字列を入力し, その電話番号を検索し, 出力 *** */
    std::string s;
    getline(std::cin, s);
    for (int i = 0; i < n; i++)
    {
        if (e[i].name == s || e[i].phone == s)
        {
            std::cout << e[i] << std::endl;
        }
    }
    return 0;
}

<<EX-2.2>>

（結果）
(base) wadatetsuya@MacBook-Pro program % ./a.out 
directory service: 06-6879-7806           
osaka university: 06-6879-7806

（コメント）
簡単に配列の代わりとして使えることがわかって驚いた。今後は積極的に使いたいと思う。

<<EX-2.2 program>>

#include <iostream>
#include <string>
#include <vector>

class Entry
{
public:
    std::string name;
    std::string phone;
    Entry(const std::string &nm = "", const std::string &ph = "")
    {
        name = nm;
        phone = ph;
    }
};

std::ostream &operator<<(std::ostream &os, const Entry &e)
{
    os << e.name << ": " << e.phone;
    return os;
}

int main()
{
    std::vector<Entry> e(10);
    e.push_back(Entry("university of tokyo", "03-3812-2111"));
    e.push_back(Entry("osaka university", "06-879-7806"));
    e.push_back(Entry("kinki university", "06-721-2332"));
    e.push_back(Entry("osaka prefectural university", "0722-52-1161"));
    e.push_back(Entry("kyoto university", "075-753-7531"));
    for (int i = 0; i < e.size(); i++)
    {
        /* *** 大阪の局番4 桁化 *** */
        if (e[i].phone.substr(0, 2) == "06")
        {
            e[i].phone.replace(0, 3, "06-6");
        }
    }
    std::cout << "directory service: ";
    /* *** 文字列を入力し, その電話番号を検索し, 出力 *** */
    std::string s;
    getline(std::cin, s);
    for (int i = 0; i < e.size(); i++)
    {
        if (e[i].name == s || e[i].phone == s)
        {
            std::cout << e[i] << std::endl;
        }
    }
    return 0;
}

<<EX-2.3>>

（結果）
(base) wadatetsuya@MacBook-Pro program % ./a.out
*** Seiseki ***
[7001] aaaa : 89
[7123] bbbb : 70
[7013] cccc : 55
[7200] dddd : 99
[7087] eeee : 83
> 7001
[7001] aaaa : 89
> 80
not found
> 7087
[7087] eeee : 83
> 0
*** Seiseki ***
[7001] aaaa : 89
[7123] bbbb : 70
[7200] dddd : 99
[7087] eeee : 83

（コメント）
lookupの実装に手間取って時間がかかった。

<<EX-2.3 program>>

#include <iostream>
#include <string>
#include <list>

class Record
{
public:
    int id;
    std::string name;
    int score;
    Record() {}
    Record(int i, const std::string &nm, int s)
    {
        id = i;
        name = nm;
        score = s;
    }
};

std::ostream &operator<<(std::ostream &os, const Record &r)
{
    os << "[" << r.id << "] " << r.name << " : " << r.score;
    return os;
}

class Seiseki
{
public:
    std::list<Record> data;
    void insert(int, const std::string &, int);
    void lookup(int);
    void erase_worst();
};

std::ostream &operator<<(std::ostream &os, const Seiseki &s)
{
    os << "*** Seiseki ***\n";
    for (std::list<Record>::const_iterator p = s.data.begin(); p != s.data.end(); p++)
    {
        os << *p << "\n";
    }
    return os;
}

void Seiseki::insert(int id, const std::string &nm, int s)
{
    data.push_back(Record(id, nm, s));
}

void Seiseki::lookup(int id)
{
    int flag = 0;
    Record find;
    std::list<Record>::iterator p;
    for (p = data.begin(); p != data.end(); p++)
    {
        if ((*p).id == id)
        {
            find = *p;
            flag = 1;
        }
    }
    if (flag == 1)
    {
        std::cout << find << std::endl;
    }
    else
    {
        std::cout << "not found" << std::endl;
    }
}

void Seiseki::erase_worst()
{
    int worstScore = 200;
    int worstId;
    std::list<Record>::iterator p;
    for (p = data.begin(); p != data.end(); p++)
    {
        if (p->score < worstScore)
        {
            worstScore = p->score;
            worstId = p->id;
        }
    }
    for (p = data.begin(); p != data.end(); p++)
    {
        if (p->id == worstId)
        {
            data.erase(p);
        }
    }
}

int main(int ac, char **av)
{
    Seiseki s;
    s.insert(7001, "aaaa", 89);
    s.insert(7123, "bbbb", 70);
    s.insert(7013, "cccc", 55);
    s.insert(7200, "dddd", 99);
    s.insert(7087, "eeee", 83);

    std::cout << s;

    int id;
    std::cout << "> ";
    std::cin >> id;
    while (id != 0)
    {
        s.lookup(id);
        std::cout << "> ";
        std::cin >> id;
    }

    s.erase_worst();
    std::cout << s;

    return 0;
}

<<EX-2.4>>

（結果）
(base) wadatetsuya@MacBook-Pro program % ./a.out
21
33
44
0
80: 21
82.5: 33
86.66: 44
92.13: 0
90
not found

（コメント）
普段使っているスクリプト言語では当たり前に使っている機能だが、C言語での実装を学ぶことで内部の実現方法の勉強になり面白く感じた。

<<EX-2.4 program>>

#include <iostream>
#include <map>

int main()
{
    std::map<double, int> fmap;
    fmap[80.00] = 21;
    fmap[82.50] = 33;
    fmap[86.66] = 44;

    std::cout << fmap[80.00] << std::endl;
    std::cout << fmap[82.50] << std::endl;
    std::cout << fmap[86.66] << std::endl;
    std::cout << fmap[92.13] << std::endl;
    // 未定義の要素に対しては, データのデフォルト値(int 型の場合は0) が返される

    std::map<double, int>::iterator p;
    for (p = fmap.begin(); p != fmap.end(); p++)
    {
        std::cout << p->first << ": " << p->second << std::endl;
    }

    double f;
    std::cin >> f;
    if ((p = fmap.find(f)) == fmap.end())
        std::cout << "not found" << std::endl;
    else
    {
        std::cout << p->first << ": " << p->second << std::endl;
        fmap.erase(p);
    }
    return 0;
}

<<EX-2.5>>

（結果）
(base) wadatetsuya@MacBook-Pro program % ./a.out     
directory service: 06-6721-2332
kinki university: 06-6721-2332
: 
: 
: 
: 
: 
: 
: 
: 
: 
: 
kinki university: 06-6721-2332
kyoto university: 075-753-7531
osaka prefectural university: 0722-52-1161
osaka university: 06-6879-7806
university of tokyo: 03-3812-2111
: 
: 
: 
: 
: 
: 
: 
: 
: 
: 
university of tokyo: 03-3812-2111
kinki university: 06-6721-2332
osaka university: 06-6879-7806
osaka prefectural university: 0722-52-1161
kyoto university: 075-753-7531

（コメント）
多くのSTLで共通のメソッドが使えることに驚いたのと同時に、実装の美しさに感動した。授業で学んだ技法を使えば今まで冗長にしか書けなかったコードもシンプルに記述できそうであった。また今後の演習が楽しみになった。

<<EX-2.5 program>>

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

class Entry
{
public:
    std::string name;
    std::string phone;
    Entry(const std::string &nm = "", const std::string &ph = "")
    {
        name = nm;
        phone = ph;
    }
};

std::ostream &operator<<(std::ostream &os, const Entry &e)
{
    os << e.name << ": " << e.phone;
    return os;
}

class by_name
{
public:
    bool operator()(const Entry &e1, const Entry &e2) const
    {
        return e1.name < e2.name;
    }
};

class by_phone
{
public:
    bool operator()(const Entry &e1, const Entry &e2) const
    {
        return e1.phone < e2.phone;
    }
};

int main()
{
    std::vector<Entry> e(10);
    e.push_back(Entry("university of tokyo", "03-3812-2111"));
    e.push_back(Entry("osaka university", "06-879-7806"));
    e.push_back(Entry("kinki university", "06-721-2332"));
    e.push_back(Entry("osaka prefectural university", "0722-52-1161"));
    e.push_back(Entry("kyoto university", "075-753-7531"));
    for (int i = 0; i < e.size(); i++)
    {
        /* *** 大阪の局番4 桁化 *** */
        if (e[i].phone.substr(0, 2) == "06")
        {
            e[i].phone.replace(0, 3, "06-6");
        }
    }
    std::cout << "directory service: ";
    /* *** 文字列を入力し, その電話番号を検索し, 出力 *** */
    std::string s;
    getline(std::cin, s);
    for (int i = 0; i < e.size(); i++)
    {
        if (e[i].name == s || e[i].phone == s)
        {
            std::cout << e[i] << std::endl;
        }
    }
    sort(e.begin(), e.end(), by_name());
    for (int i = 0; i < e.size(); i++)
    {
        std::cout << e[i] << std::endl;
    }
    sort(e.begin(), e.end(), by_phone());
    for (int i = 0; i < e.size(); i++)
    {
        std::cout << e[i] << std::endl;
    }
    return 0;
}

<<全体の感想>>

資料が丁寧で分かりやすく、自分で追加で調べる必要がなかったのが嬉しかった。また、段階的に新しい内容に取り組むように作られていて、演習を行うのが楽しかった。今後の演習が一層楽しみになった。
